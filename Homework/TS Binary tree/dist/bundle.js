(()=>{"use strict";const e=function(e,t){this.data=e,this.key=t,this.data=e,this.key=t,this.leftChild=null,this.rightChild=null,this.depthLevel=0},t=function(){function t(){this.root=null}return t.prototype.addNode=function(t,i){var r=new e(i,t);null===this.root?this.root=r:this.recurceAddNode(r,this.root)},t.prototype.recurceAddNode=function(e,t){if(e.depthLevel++,e.depthLevel>4)alert("Maximum tree depth reached!");else if(e.key<t.key)null===t.leftChild?t.leftChild=e:this.recurceAddNode(e,t.leftChild);else{if(!(e.key>t.key))return void alert("Such a key already exists!");null===t.rightChild?t.rightChild=e:this.recurceAddNode(e,t.rightChild)}},t.prototype.removeHelper=function(e,t){this.removeNode(this.root,e)},t.prototype.removeNode=function(e,t){if(null===e)return null;if(t<e.key)return e.leftChild=this.removeNode(e.leftChild,t),e;if(t>e.key)return e.rightChild=this.removeNode(e.rightChild,t),e;if(null===e.leftChild&&null===e.rightChild)return null;if(null===e.leftChild)return e.rightChild;if(null===e.rightChild)return e.leftChild;var i=this.searchMinNode(e.rightChild);return e.key=i.key,e.rightChild=this.removeNode(e.rightChild,i.key),e},t.prototype.searchMinNode=function(e){return null===e.leftChild?e:this.searchMinNode(e.leftChild)},t.prototype.searchNodeByKey=function(e,t){try{if(e===t.key)return t;if(e>t.key)return this.searchNodeByKey(e,t.rightChild);if(e<t.key)return this.searchNodeByKey(e,t.leftChild)}catch(e){return alert("There is no such key!"),null}},t.prototype.isHaveRoot=function(e){if(null===e.root)return alert("The tree is not initialized!"),null},t}(),i=function(){function e(){this.spreadByDepth=250,this.xPosFirsrNode=window.innerWidth/2-60,this.yPosArr=[80,160,240,320,400]}return e.prototype.drawTree=function(e){var t;t=this.createPosArray(this.xPosFirsrNode,this.yPosArr,e,[],this.spreadByDepth);var i=document.getElementById("canvas-output"),r=i.getContext("2d");i.width=window.innerWidth,i.height=window.innerHeight;for(var n=0;n<t.length;)r.lineWidth=2,r.strokeStyle="#ab",r.strokeRect(t[n+1],t[n+2],60,30),r.font="20px Georgia",r.textAlign="center",r.fillText(""+t[n],t[n+1]+30,t[n+2]+15),n+=3},e.prototype.createPosArray=function(e,t,i,r,n){return null!==i&&(r.push(i.key,e,t[i.depthLevel]),this.createPosArray(e-n,t,i.leftChild,r,n/2),this.createPosArray(e+n,t,i.rightChild,r,n/2)),r},e}();var r=new t,n=new i,l="entry-field__key",o="entry-field__ext-key",d="entry-field__delete-key";function h(e){var t=Number(document.getElementById(e).value);return t>50||t<0||t%1>0||Number.isNaN(t)?(alert("Invalid key value!"),null):0===t?(alert("Missing value in key field!"),null):t}window.addNode=function(){var e=h(l);if(null!==e){var t=document.getElementById("entry-field__data").value;0!==t.length?t.length>10?alert("Invalid data field length!"):(r.addNode(e,t),document.getElementById("entry-field__data").value="",document.getElementById(l).value=""):alert("Missing value in data field!")}},window.extractingNode=function(){if(null!==r.isHaveRoot(r)){var e=h(o);if(null!==e){var t=r.searchNodeByKey(e,r.root);null!==t&&(t.data,document.getElementById("output-field__ext-key").innerHTML="Data: "+t.data,document.getElementById(o).value="")}}},window.deleteNode=function(){if(null!==r.isHaveRoot(r)){var e=h(d);null!==e&&(r.removeHelper(e,r.root),document.getElementById(d).value="")}},window.outputTree=function(){null!==r.isHaveRoot(r)&&n.drawTree(r.root)},window.clearTree=function(){if(null!==r.isHaveRoot(r)){var e=document.getElementById("canvas-output");e.getContext("2d").clearRect(0,0,e.width,e.height),r.root=null}},document.addEventListener("DOMContentLoaded",(function(){alert("- Maximum tree depth (including root): 5 nodes.\n- Maximum number of characters for data field: 10 characters.\n- Keys can only be integers with a value of no more than 50.\n")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,